import asyncio
import logging
import os
import time
import random
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher
from aiogram.methods import GetAvailableGifts, CreateNewStickerSet, SendSticker
from aiogram.types import Gifts, InputFile, InputSticker

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")
USER_ID = int(os.getenv("USER_ID"))  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –Ω–∞–±–æ—Ä–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤
BOT_USERNAME = os.getenv("BOT_USERNAME")  # –ò–º—è –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ (–±–µ–∑ @)

if not BOT_TOKEN or not CHANNEL_ID or not USER_ID or not BOT_USERNAME:
    logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–∫–µ–Ω, ID –∫–∞–Ω–∞–ª–∞, USER_ID –∏–ª–∏ BOT_USERNAME –∏–∑ .env —Ñ–∞–π–ª–∞.")
    exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[logging.FileHandler("gift_checker.log", encoding="utf-8"), logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤
known_gifts = {}
first_run = True


async def get_available_gifts():
    try:
        result: Gifts = await bot(GetAvailableGifts())
        logger.info(f"–ó–∞–ø—Ä–æ—Å –ø–æ–¥–∞—Ä–∫–æ–≤: –ø–æ–ª—É—á–µ–Ω–æ {len(result.gifts)} —à—Ç—É–∫.")
        return result.gifts
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–∞—Ä–∫–æ–≤: {e}")
        return []


async def send_notification(message: str):
    try:
        await bot.send_message(chat_id=CHANNEL_ID, text=message, disable_web_page_preview=True)
    except Exception as e:
        if 'retry after' in str(e).lower():
            retry_seconds = int(str(e).split('retry after ')[-1].split()[0])
            logger.warning(f"Flood control exceeded, retrying in {retry_seconds} seconds...")
            await asyncio.sleep(retry_seconds)
            await send_notification(message)
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")


async def send_gift_info(gift):
    try:
        gift_info = (
            f"üéÅ –ù–æ–≤—ã–π –ü–æ–¥–∞—Ä–æ–∫ üî¥: {gift.title if hasattr(gift, 'title') else '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}\n"
            f"  –≠–º–æ–¥–∑–∏: {gift.sticker.emoji}\n"
            f"  –ó–≤–µ–∑–¥: {gift.star_count}\n"
            f"  –û—Å—Ç–∞–ª–æ—Å—å: {gift.remaining_count if gift.remaining_count else '‚àû'}\n"
            f"ID: {gift.id}\n"
        )
        await send_notification(gift_info)

        if gift.sticker and hasattr(gift.sticker, 'file_id'):
            await bot.send_sticker(chat_id=CHANNEL_ID, sticker=gift.sticker.file_id)
        elif gift.sticker and hasattr(gift.sticker, 'file_path'):
            await bot.send_sticker(chat_id=CHANNEL_ID, sticker=InputFile(gift.sticker.file_path))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–∞—Ä–∫–µ: {e}")


async def create_sticker_set_from_gifts(gifts):
    """
    –°–æ–∑–¥–∞–µ—Ç –Ω–∞–±–æ—Ä —Å—Ç–∏–∫–µ—Ä–æ–≤ –∏–∑ –ø–æ–¥–∞—Ä–∫–æ–≤.
    """
    try:
        stickers = []
        for gift in gifts:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Å—Ç–∏–∫–µ—Ä–∞
            sticker_format = "animated" if gift.sticker.is_animated else "static"

            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç InputSticker
            stickers.append(InputSticker(
                sticker=gift.sticker.file_id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º file_id —Å—Ç–∏–∫–µ—Ä–∞
                emoji_list=[gift.sticker.emoji],  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–º–æ–¥–∑–∏ —Å—Ç–∏–∫–µ—Ä–∞
                format=sticker_format  # –£–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç —Å—Ç–∏–∫–µ—Ä–∞
            ))

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –Ω–∞–±–æ—Ä–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤
        random_suffix = random.randint(1000, 9999)  # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ
        sticker_set_name = f"test2423ksj_{random_suffix}_by_{BOT_USERNAME}"  # –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –Ω–∞–±–æ—Ä–∞

        # –°–æ–∑–¥–∞–µ–º –Ω–∞–±–æ—Ä —Å—Ç–∏–∫–µ—Ä–æ–≤
        await bot(CreateNewStickerSet(
            user_id=USER_ID,
            name=sticker_set_name,  # –ò–º—è –Ω–∞–±–æ—Ä–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤
            title="Gift Stickers",  # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞–±–æ—Ä–∞
            stickers=stickers,  # –°–ø–∏—Å–æ–∫ —Å—Ç–∏–∫–µ—Ä–æ–≤
            sticker_type="regular"  # –¢–∏–ø –Ω–∞–±–æ—Ä–∞ (–æ–±—ã—á–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—ã)
        ))
        logger.info(f"–ù–∞–±–æ—Ä —Å—Ç–∏–∫–µ—Ä–æ–≤ '{sticker_set_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.")
        return sticker_set_name
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–±–æ—Ä–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤: {e}")
        return None


async def send_stickers_from_set(sticker_set_name):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∏–∫–µ—Ä—ã –∏–∑ –Ω–∞–±–æ—Ä–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–±–æ—Ä–µ —Å—Ç–∏–∫–µ—Ä–æ–≤
        sticker_set = await bot.get_sticker_set(name=sticker_set_name)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Å—Ç–∏–∫–µ—Ä –≤ —á–∞—Ç
        for sticker in sticker_set.stickers:
            await bot(SendSticker(chat_id=CHANNEL_ID, sticker=sticker.file_id))
            logger.info(f"–°—Ç–∏–∫–µ—Ä {sticker.file_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {CHANNEL_ID}.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∏–∫–µ—Ä–æ–≤: {e}")


async def check_new_gifts():
    global known_gifts, first_run
    current_gifts = await get_available_gifts()
    current_gift_ids = {gift.id for gift in current_gifts}

    new_gifts = [gift for gift in current_gifts if gift.id not in known_gifts]
    known_gifts.update({gift.id: time.time() for gift in new_gifts})

    if first_run and new_gifts:
        first_run = False
        all_gifts_info = "üéâ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏:\n\n" + "\n\n".join(
            f"üéÅ {gift.title if hasattr(gift, 'title') else '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}\n"
            f"  –≠–º–æ–¥–∑–∏: {gift.sticker.emoji}\n"
            f"  –ó–≤–µ–∑–¥: {gift.star_count}\n"
            f"  –û—Å—Ç–∞–ª–æ—Å—å: {gift.remaining_count if gift.remaining_count else '‚àû'}\n"
            f"ID: {gift.id}"
            for gift in new_gifts
        )
        await send_notification(all_gifts_info)
        logger.info("–ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏.")

        # –°–æ–∑–¥–∞–µ–º –Ω–∞–±–æ—Ä —Å—Ç–∏–∫–µ—Ä–æ–≤ –∏–∑ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤
        sticker_set_name = await create_sticker_set_from_gifts(new_gifts)
        if sticker_set_name:
            await send_stickers_from_set(sticker_set_name)
    elif new_gifts:
        await asyncio.gather(*(send_gift_info(gift) for gift in new_gifts))
        logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ –ø–æ–¥–∞—Ä–∫–∏: {[gift.id for gift in new_gifts]}")

        # –°–æ–∑–¥–∞–µ–º –Ω–∞–±–æ—Ä —Å—Ç–∏–∫–µ—Ä–æ–≤ –∏–∑ –Ω–æ–≤—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤
        sticker_set_name = await create_sticker_set_from_gifts(new_gifts)
        if sticker_set_name:
            await send_stickers_from_set(sticker_set_name)
    else:
        logger.info("–ù–æ–≤—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ –Ω–µ—Ç.")


async def main():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    while True:
        await check_new_gifts()
        await asyncio.sleep(10)


if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
