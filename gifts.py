import asyncio
import logging
import os
import time
import json
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher
from aiogram.methods import GetAvailableGifts, CreateNewStickerSet, AddStickerToSet, SendSticker, GetStickerSet
from aiogram.types import Gifts, InputSticker

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")
USER_ID = int(os.getenv("USER_ID"))
BOT_USERNAME = os.getenv("BOT_USERNAME")

STICKER_SET_NAME = f"GiftsNotice1_by_{BOT_USERNAME}"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[logging.FileHandler("gift_checker.log", encoding="utf-8"), logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

known_gifts = {}
sent_stickers = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å—Ç–∏–∫–µ—Ä–æ–≤
existing_stickers = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ ID –ø–æ–¥–∞—Ä–∫–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
def load_known_gifts():
    if os.path.exists("known_gifts.json"):
        with open("known_gifts.json", "r") as f:
            return json.load(f)
    return {}

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–∞—Ä–∫–∏ –≤ —Ñ–∞–π–ª
def save_known_gifts():
    with open("known_gifts.json", "w") as f:
        json.dump(known_gifts, f)

async def sticker_set_exists(name):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞."""
    try:
        await bot(GetStickerSet(name=name))
        return True
    except:
        return False

async def create_sticker_set_from_gifts(gifts):
    """–°–æ–∑–¥–∞—ë—Ç —Å—Ç–∏–∫–µ—Ä–ø–∞–∫, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç."""
    stickers = [InputSticker(sticker=gift.sticker.file_id, emoji_list=[gift.sticker.emoji], format="static") for gift in gifts]
    try:
        await bot(CreateNewStickerSet(user_id=USER_ID, name=STICKER_SET_NAME, title="Gift Stickers", stickers=stickers, sticker_type="regular"))
        logger.info(f"–°—Ç–∏–∫–µ—Ä–ø–∞–∫ '{STICKER_SET_NAME}' —Å–æ–∑–¥–∞–Ω.")
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –Ω–æ–≤—ã–µ —Å—Ç–∏–∫–µ—Ä—ã –≤ —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö
        for gift in gifts:
            existing_stickers.add(gift.sticker.file_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞: {e}")

async def add_stickers_to_set(gifts):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ —Å—Ç–∏–∫–µ—Ä—ã –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—Ç–∏–∫–µ—Ä–ø–∞–∫."""
    for gift in gifts:
        if gift.sticker.file_id not in existing_stickers:
            try:
                sticker = InputSticker(sticker=gift.sticker.file_id, emoji_list=[gift.sticker.emoji], format="static")
                await bot(AddStickerToSet(user_id=USER_ID, name=STICKER_SET_NAME, sticker=sticker))
                existing_stickers.add(gift.sticker.file_id)  # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö
                sent_stickers.add(gift.sticker.file_id)  # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö
                logger.info(f"–°—Ç–∏–∫–µ—Ä {gift.sticker.file_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ {STICKER_SET_NAME} –∏ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π.")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–∞ {gift.sticker.file_id}: {e}")

async def send_stickers_from_set():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∏–∫–µ—Ä—ã –∏–∑ –Ω–∞–±–æ—Ä–∞ –≤ –∫–∞–Ω–∞–ª."""
    try:
        sticker_set = await bot(GetStickerSet(name=STICKER_SET_NAME))
        for sticker in sticker_set.stickers:
            if sticker.file_id not in sent_stickers:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
                await bot(SendSticker(chat_id=CHANNEL_ID, sticker=sticker.file_id))
                sent_stickers.add(sticker.file_id)  # –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å—Ç–∏–∫–µ—Ä–æ–≤
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å—Ç–∏–∫–µ—Ä {sticker.file_id} –≤ –∫–∞–Ω–∞–ª.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∏–∫–µ—Ä–æ–≤: {e}")

async def send_notification(message: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è."""
    try:
        post_message = await bot.send_message(
            chat_id=CHANNEL_ID,
            text=message.replace('<br>', '\n'),
            parse_mode="HTML",
            disable_web_page_preview=True
        )
        logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return post_message
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return None

async def check_for_upgrades():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ø–≥—Ä–µ–π–¥–æ–≤."""
    try:
        upgrades = await bot.get_my_commands()  # –ü—Ä–∏–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–∞–Ω–¥
        if upgrades:
            logger.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∞–ø–≥—Ä–µ–π–¥—ã.")
            await send_notification(f"<b>üöÄ New upgrades available!:</b> <i>{', '.join([cmd.command for cmd in upgrades])}</i>")
        else:
            logger.info("–ê–ø–≥—Ä–µ–π–¥–æ–≤ –Ω–µ—Ç.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–ø–≥—Ä–µ–π–¥–æ–≤: {e}")

async def check_new_gifts():
    global known_gifts
    current_gifts = await bot(GetAvailableGifts())
    new_gifts = [gift for gift in current_gifts.gifts if gift.id not in known_gifts]

    known_gifts.update({gift.id: time.time() for gift in new_gifts})
    save_known_gifts()

    if new_gifts:
        logger.info(f"NEW GIFTS ALERT.")
        gift_info = "\n\n".join(
            f" <b>new gift:</b> \n"
            f"<b>price:</b> <code>{gift.star_count}</code>‚òÖ\n"
            f"<b>supply:</b> <code>{gift.total_count if gift.total_count else '‚àû'}</code>" for gift in new_gifts
        )

        post_message = await send_notification(f"<b>üéâ New Gifts:</b><br>{gift_info}")

        if post_message is not None:
            post_message_id = post_message.message_id
            await send_stickers_in_comments(post_message_id)

            if not await sticker_set_exists(STICKER_SET_NAME):
                await create_sticker_set_from_gifts(new_gifts)
            else:
                await add_stickers_to_set(new_gifts)

            await send_stickers_from_set()
        else:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ –ø–æ–¥–∞—Ä–∫–∞–º–∏.")
    else:
        logger.info("–ù–æ–≤—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ –Ω–µ—Ç.")

async def send_stickers_in_comments(post_message_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∏–∫–µ—Ä—ã –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–æ—Å—Ç—É, –∏–∑–±–µ–≥–∞—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫."""
    try:
        sticker_set = await bot(GetStickerSet(name=STICKER_SET_NAME))  # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∏–∫–µ—Ä–ø–∞–∫
        for sticker in sticker_set.stickers:
            if sticker.file_id not in sent_stickers:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å—Ç–∏–∫–µ—Ä
                await bot(SendSticker(
                    chat_id=CHANNEL_ID,
                    sticker=sticker.file_id,
                    reply_to_message_id=post_message_id  # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                ))
                sent_stickers.add(sticker.file_id)  # –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å—Ç–∏–∫–µ—Ä–æ–≤
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å—Ç–∏–∫–µ—Ä {sticker.file_id} –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ—Å—Ç—É —Å ID {post_message_id}.")
            else:
                logger.info(f"–°—Ç–∏–∫–µ—Ä {sticker.file_id} —É–∂–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä–∞–Ω–µ–µ, –ø—Ä–æ–ø—É—â–µ–Ω.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∏–∫–µ—Ä–æ–≤ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {e}")

async def main():
    global known_gifts
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

    known_gifts = load_known_gifts()

    while True:
        await check_new_gifts()
        await check_for_upgrades()
        await asyncio.sleep(10)

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
